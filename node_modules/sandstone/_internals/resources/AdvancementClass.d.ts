import { ResourceClass } from "./Resource";
import type { AdvancementType, MultiplePlayersArgument } from "../arguments/index";
import type { Datapack } from "../datapack/index";
export declare class AdvancementClass<CriteriaNames extends string = string> extends ResourceClass {
    advancementJson: AdvancementType<CriteriaNames>;
    constructor(datapack: Datapack, name: string, advancement: AdvancementType<CriteriaNames>);
    /**
     * Grant this advancement to the players.
     */
    grant(players: MultiplePlayersArgument, criterion?: CriteriaNames): void;
    /**
     * Revoke this advancement from the players.
     */
    revoke(players: MultiplePlayersArgument, criterion?: CriteriaNames): void;
    /**
     * Grant this advancement and all its parent advancements to the players.
     * Think of specifying everything from the start *until* that advancement.
     *
     * The exact order the operation is carried out in is: `parent > parent's parent > ... > root > this advancement.`
     */
    grantUntilThis(players: MultiplePlayersArgument): void;
    /**
     * Revoke this advancement and all its parent advancements from the players.
     * Think of specifying everything from the start *until* that advancement.
     *
     * The exact order the operation is carried out in is: `parent > parent's parent > ... > root > this advancement.`
     */
    revokeUntilThis(players: MultiplePlayersArgument): void;
    /**
     * Grant this advancement and all its children advancements to the players.
     * Think of specifying everything *from* that advancement to the end.
     *
     * The exact order the operation is carried out in is specified `advancement > child > child's child > ...`.
     * When it operates on a child that branches, it iterates through all its children before continuing.
     */
    grantFromThis(players: MultiplePlayersArgument): void;
    /**
     * Revoke this advancement and all its children advancements from the players.
     * Think of specifying everything *from* that advancement to the end.
     *
     * The exact order the operation is carried out in is specified `advancement > child > child's child > ...`.
     * When it operates on a child that branches, it iterates through all its children before continuing.
     */
    revokeFromThis(players: MultiplePlayersArgument): void;
    /**
     * Grant this advancement, all its parent advancements, and all its children advancements to the players.
     * Think of specifying everything through the specified advancement, going both backwards and forwards.
     *
     * The exact order the operation is as if the command were executed with `until` specified, then with `from` specified:
     * `parent > parent's parent > ... > root > specified advancement > child > child's child > ...`
     */
    grantThroughThis(players: MultiplePlayersArgument): void;
    /**
     * Revoke this advancement, all its parent advancements, and all its children advancements from the players.
     * Think of specifying everything through the specified advancement, going both backwards and forwards.
     *
     * The exact order the operation is as if the command were executed with `until` specified, then with `from` specified:
     * `parent > parent's parent > ... > root > specified advancement > child > child's child > ...`
     */
    revokeThroughThis(players: MultiplePlayersArgument): void;
}
