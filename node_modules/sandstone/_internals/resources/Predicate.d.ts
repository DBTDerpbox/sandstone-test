import { ResourceClass } from "./Resource";
import type { PredicateType } from "../arguments/index";
import type { Datapack } from "../datapack/index";
import type { ConditionClass } from "../variables/index";
export declare class PredicateClass extends ResourceClass implements ConditionClass {
    predicateJson: import("../arguments/index").ObjectOrArray<({
        condition: "minecraft:alternative";
    } & {
        terms: (({
            condition: "minecraft:alternative";
        } & any) | ({
            condition: "minecraft:block_state_property";
        } & {
            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
            properties?: Record<string, string> | undefined;
        }) | ({
            condition: "minecraft:damage_source_properties";
        } & {
            predicate: Partial<{
                blocked: boolean;
                dealt: import("../arguments/resources/criteria").NumberOrMinMax;
                taken: import("../arguments/resources/criteria").NumberOrMinMax;
                source_entity: Partial<{
                    distance: Partial<{
                        absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                        horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                        amplifier?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                        duration?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                    }>>>;
                    equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                        count: import("../arguments/resources/criteria").NumberOrMinMax;
                        durability: import("../arguments/resources/criteria").NumberOrMinMax;
                        enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                        nbt: string;
                        potion: string;
                        tag: string | import("./Tag").TagClass<"items">;
                    }>>;
                    flags: Partial<{
                        is_on_fire: boolean;
                        is_sneaking: boolean;
                        is_sprinting: boolean;
                        is_swimming: boolean;
                        is_baby: boolean;
                    }>;
                    location: Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    nbt: string;
                    player: Partial<{
                        advancements: Record<string, boolean | Record<string, boolean>>;
                        gamemode: import("../arguments").GAMEMODES;
                        level: import("../arguments/resources/criteria").NumberOrMinMax;
                        recipes: Record<string, boolean>;
                        stats: {
                            type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                            stat: string;
                            value: import("../arguments/resources/criteria").NumberOrMinMax;
                        };
                    }>;
                    team: string;
                    type: (Pick<string, never> & {
                        trimStart: () => string;
                    }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                    targeted_entity: Partial<any>;
                    vehicle: Partial<any>;
                }>;
                type: Partial<{
                    bypasses_armor: boolean;
                    bypasses_invulnerability: boolean;
                    bypasses_magic: boolean;
                    is_explosion: boolean;
                    is_fire: boolean;
                    is_magic: boolean;
                    is_projectile: boolean;
                    is_lightning: boolean;
                    direct_entity: Partial<{
                        distance: Partial<{
                            absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                            horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                            amplifier?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                            duration?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                        }>>>;
                        equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                            count: import("../arguments/resources/criteria").NumberOrMinMax;
                            durability: import("../arguments/resources/criteria").NumberOrMinMax;
                            enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                            nbt: string;
                            potion: string;
                            tag: string | import("./Tag").TagClass<"items">;
                        }>>;
                        flags: Partial<{
                            is_on_fire: boolean;
                            is_sneaking: boolean;
                            is_sprinting: boolean;
                            is_swimming: boolean;
                            is_baby: boolean;
                        }>;
                        location: Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        nbt: string;
                        player: Partial<{
                            advancements: Record<string, boolean | Record<string, boolean>>;
                            gamemode: import("../arguments").GAMEMODES;
                            level: import("../arguments/resources/criteria").NumberOrMinMax;
                            recipes: Record<string, boolean>;
                            stats: {
                                type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                stat: string;
                                value: import("../arguments/resources/criteria").NumberOrMinMax;
                            };
                        }>;
                        team: string;
                        type: (Pick<string, never> & {
                            trimStart: () => string;
                        }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                        targeted_entity: Partial<any>;
                        vehicle: Partial<any>;
                    }>;
                    source_entity: Partial<{
                        distance: Partial<{
                            absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                            horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                            amplifier?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                            duration?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                        }>>>;
                        equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                            count: import("../arguments/resources/criteria").NumberOrMinMax;
                            durability: import("../arguments/resources/criteria").NumberOrMinMax;
                            enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                            nbt: string;
                            potion: string;
                            tag: string | import("./Tag").TagClass<"items">;
                        }>>;
                        flags: Partial<{
                            is_on_fire: boolean;
                            is_sneaking: boolean;
                            is_sprinting: boolean;
                            is_swimming: boolean;
                            is_baby: boolean;
                        }>;
                        location: Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        nbt: string;
                        player: Partial<{
                            advancements: Record<string, boolean | Record<string, boolean>>;
                            gamemode: import("../arguments").GAMEMODES;
                            level: import("../arguments/resources/criteria").NumberOrMinMax;
                            recipes: Record<string, boolean>;
                            stats: {
                                type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                stat: string;
                                value: import("../arguments/resources/criteria").NumberOrMinMax;
                            };
                        }>;
                        team: string;
                        type: (Pick<string, never> & {
                            trimStart: () => string;
                        }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                        targeted_entity: Partial<any>;
                        vehicle: Partial<any>;
                    }>;
                }>;
            }>;
        }) | ({
            condition: "minecraft:entity_properties";
        } & {
            entity: "this" | "killer" | "killer_player";
            predicate: Partial<{
                distance: Partial<{
                    absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                    horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                }> & Partial<{
                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                }> & Partial<{
                    biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                    block: Partial<{
                        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                        tag: string | import("./Tag").TagClass<"blocks">;
                        nbt: string;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                    feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                    fluid: Partial<{
                        fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                        tag: string | import("./Tag").TagClass<"fluids">;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    light: import("../arguments/resources/criteria").NumberOrMinMax;
                    position: Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }>;
                    smokey: boolean;
                }>;
                effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                    amplifier?: number | {
                        max?: number | undefined;
                        min?: number | undefined;
                    } | undefined;
                    duration?: number | {
                        max?: number | undefined;
                        min?: number | undefined;
                    } | undefined;
                }>>>;
                equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                    count: import("../arguments/resources/criteria").NumberOrMinMax;
                    durability: import("../arguments/resources/criteria").NumberOrMinMax;
                    enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                    nbt: string;
                    potion: string;
                    tag: string | import("./Tag").TagClass<"items">;
                }>>;
                flags: Partial<{
                    is_on_fire: boolean;
                    is_sneaking: boolean;
                    is_sprinting: boolean;
                    is_swimming: boolean;
                    is_baby: boolean;
                }>;
                location: Partial<{
                    biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                    block: Partial<{
                        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                        tag: string | import("./Tag").TagClass<"blocks">;
                        nbt: string;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                    feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                    fluid: Partial<{
                        fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                        tag: string | import("./Tag").TagClass<"fluids">;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    light: import("../arguments/resources/criteria").NumberOrMinMax;
                    position: Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }>;
                    smokey: boolean;
                }>;
                nbt: string;
                player: Partial<{
                    advancements: Record<string, boolean | Record<string, boolean>>;
                    gamemode: import("../arguments").GAMEMODES;
                    level: import("../arguments/resources/criteria").NumberOrMinMax;
                    recipes: Record<string, boolean>;
                    stats: {
                        type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                        stat: string;
                        value: import("../arguments/resources/criteria").NumberOrMinMax;
                    };
                }>;
                team: string;
                type: (Pick<string, never> & {
                    trimStart: () => string;
                }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                targeted_entity: Partial<any>;
                vehicle: Partial<any>;
            }>;
        }) | ({
            condition: "minecraft:entity_scores";
        } & {
            entity: "this" | "killer" | "killer_player";
            scores: Record<string, import("../arguments/resources/criteria").NumberOrMinMax>;
        }) | ({
            condition: "minecraft:inverted";
        } & {
            term: import("../arguments").ObjectOrArray<({
                condition: "minecraft:alternative";
            } & any) | ({
                condition: "minecraft:block_state_property";
            } & {
                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                properties?: Record<string, string> | undefined;
            }) | ({
                condition: "minecraft:damage_source_properties";
            } & {
                predicate: Partial<{
                    blocked: boolean;
                    dealt: import("../arguments/resources/criteria").NumberOrMinMax;
                    taken: import("../arguments/resources/criteria").NumberOrMinMax;
                    source_entity: Partial<{
                        distance: Partial<{
                            absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                            horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                            amplifier?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                            duration?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                        }>>>;
                        equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                            count: import("../arguments/resources/criteria").NumberOrMinMax;
                            durability: import("../arguments/resources/criteria").NumberOrMinMax;
                            enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                            nbt: string;
                            potion: string;
                            tag: string | import("./Tag").TagClass<"items">;
                        }>>;
                        flags: Partial<{
                            is_on_fire: boolean;
                            is_sneaking: boolean;
                            is_sprinting: boolean;
                            is_swimming: boolean;
                            is_baby: boolean;
                        }>;
                        location: Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        nbt: string;
                        player: Partial<{
                            advancements: Record<string, boolean | Record<string, boolean>>;
                            gamemode: import("../arguments").GAMEMODES;
                            level: import("../arguments/resources/criteria").NumberOrMinMax;
                            recipes: Record<string, boolean>;
                            stats: {
                                type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                stat: string;
                                value: import("../arguments/resources/criteria").NumberOrMinMax;
                            };
                        }>;
                        team: string;
                        type: (Pick<string, never> & {
                            trimStart: () => string;
                        }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                        targeted_entity: Partial<any>;
                        vehicle: Partial<any>;
                    }>;
                    type: Partial<{
                        bypasses_armor: boolean;
                        bypasses_invulnerability: boolean;
                        bypasses_magic: boolean;
                        is_explosion: boolean;
                        is_fire: boolean;
                        is_magic: boolean;
                        is_projectile: boolean;
                        is_lightning: boolean;
                        direct_entity: Partial<{
                            distance: Partial<{
                                absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                                horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                            }> & Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }> & Partial<{
                                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                                block: Partial<{
                                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                    tag: string | import("./Tag").TagClass<"blocks">;
                                    nbt: string;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                                fluid: Partial<{
                                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                    tag: string | import("./Tag").TagClass<"fluids">;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                light: import("../arguments/resources/criteria").NumberOrMinMax;
                                position: Partial<{
                                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                                }>;
                                smokey: boolean;
                            }>;
                            effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                                amplifier?: number | {
                                    max?: number | undefined;
                                    min?: number | undefined;
                                } | undefined;
                                duration?: number | {
                                    max?: number | undefined;
                                    min?: number | undefined;
                                } | undefined;
                            }>>>;
                            equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                                count: import("../arguments/resources/criteria").NumberOrMinMax;
                                durability: import("../arguments/resources/criteria").NumberOrMinMax;
                                enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                                stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                                item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                                nbt: string;
                                potion: string;
                                tag: string | import("./Tag").TagClass<"items">;
                            }>>;
                            flags: Partial<{
                                is_on_fire: boolean;
                                is_sneaking: boolean;
                                is_sprinting: boolean;
                                is_swimming: boolean;
                                is_baby: boolean;
                            }>;
                            location: Partial<{
                                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                                block: Partial<{
                                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                    tag: string | import("./Tag").TagClass<"blocks">;
                                    nbt: string;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                                fluid: Partial<{
                                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                    tag: string | import("./Tag").TagClass<"fluids">;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                light: import("../arguments/resources/criteria").NumberOrMinMax;
                                position: Partial<{
                                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                                }>;
                                smokey: boolean;
                            }>;
                            nbt: string;
                            player: Partial<{
                                advancements: Record<string, boolean | Record<string, boolean>>;
                                gamemode: import("../arguments").GAMEMODES;
                                level: import("../arguments/resources/criteria").NumberOrMinMax;
                                recipes: Record<string, boolean>;
                                stats: {
                                    type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                    stat: string;
                                    value: import("../arguments/resources/criteria").NumberOrMinMax;
                                };
                            }>;
                            team: string;
                            type: (Pick<string, never> & {
                                trimStart: () => string;
                            }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                            targeted_entity: Partial<any>;
                            vehicle: Partial<any>;
                        }>;
                        source_entity: Partial<{
                            distance: Partial<{
                                absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                                horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                            }> & Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }> & Partial<{
                                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                                block: Partial<{
                                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                    tag: string | import("./Tag").TagClass<"blocks">;
                                    nbt: string;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                                fluid: Partial<{
                                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                    tag: string | import("./Tag").TagClass<"fluids">;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                light: import("../arguments/resources/criteria").NumberOrMinMax;
                                position: Partial<{
                                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                                }>;
                                smokey: boolean;
                            }>;
                            effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                                amplifier?: number | {
                                    max?: number | undefined;
                                    min?: number | undefined;
                                } | undefined;
                                duration?: number | {
                                    max?: number | undefined;
                                    min?: number | undefined;
                                } | undefined;
                            }>>>;
                            equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                                count: import("../arguments/resources/criteria").NumberOrMinMax;
                                durability: import("../arguments/resources/criteria").NumberOrMinMax;
                                enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                                stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                                item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                                nbt: string;
                                potion: string;
                                tag: string | import("./Tag").TagClass<"items">;
                            }>>;
                            flags: Partial<{
                                is_on_fire: boolean;
                                is_sneaking: boolean;
                                is_sprinting: boolean;
                                is_swimming: boolean;
                                is_baby: boolean;
                            }>;
                            location: Partial<{
                                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                                block: Partial<{
                                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                    tag: string | import("./Tag").TagClass<"blocks">;
                                    nbt: string;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                                fluid: Partial<{
                                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                    tag: string | import("./Tag").TagClass<"fluids">;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                light: import("../arguments/resources/criteria").NumberOrMinMax;
                                position: Partial<{
                                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                                }>;
                                smokey: boolean;
                            }>;
                            nbt: string;
                            player: Partial<{
                                advancements: Record<string, boolean | Record<string, boolean>>;
                                gamemode: import("../arguments").GAMEMODES;
                                level: import("../arguments/resources/criteria").NumberOrMinMax;
                                recipes: Record<string, boolean>;
                                stats: {
                                    type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                    stat: string;
                                    value: import("../arguments/resources/criteria").NumberOrMinMax;
                                };
                            }>;
                            team: string;
                            type: (Pick<string, never> & {
                                trimStart: () => string;
                            }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                            targeted_entity: Partial<any>;
                            vehicle: Partial<any>;
                        }>;
                    }>;
                }>;
            }) | ({
                condition: "minecraft:entity_properties";
            } & {
                entity: "this" | "killer" | "killer_player";
                predicate: Partial<{
                    distance: Partial<{
                        absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                        horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                        amplifier?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                        duration?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                    }>>>;
                    equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                        count: import("../arguments/resources/criteria").NumberOrMinMax;
                        durability: import("../arguments/resources/criteria").NumberOrMinMax;
                        enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                        nbt: string;
                        potion: string;
                        tag: string | import("./Tag").TagClass<"items">;
                    }>>;
                    flags: Partial<{
                        is_on_fire: boolean;
                        is_sneaking: boolean;
                        is_sprinting: boolean;
                        is_swimming: boolean;
                        is_baby: boolean;
                    }>;
                    location: Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    nbt: string;
                    player: Partial<{
                        advancements: Record<string, boolean | Record<string, boolean>>;
                        gamemode: import("../arguments").GAMEMODES;
                        level: import("../arguments/resources/criteria").NumberOrMinMax;
                        recipes: Record<string, boolean>;
                        stats: {
                            type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                            stat: string;
                            value: import("../arguments/resources/criteria").NumberOrMinMax;
                        };
                    }>;
                    team: string;
                    type: (Pick<string, never> & {
                        trimStart: () => string;
                    }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                    targeted_entity: Partial<any>;
                    vehicle: Partial<any>;
                }>;
            }) | ({
                condition: "minecraft:entity_scores";
            } & {
                entity: "this" | "killer" | "killer_player";
                scores: Record<string, import("../arguments/resources/criteria").NumberOrMinMax>;
            }) | ({
                condition: "minecraft:inverted";
            } & any) | ({
                condition: "minecraft:killed_by_player";
            } & {
                inverse: boolean;
            }) | ({
                condition: "minecraft:location_check";
            } & {
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                offsetZ?: number | undefined;
                predicate: Partial<{
                    biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                    block: Partial<{
                        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                        tag: string | import("./Tag").TagClass<"blocks">;
                        nbt: string;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                    feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                    fluid: Partial<{
                        fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                        tag: string | import("./Tag").TagClass<"fluids">;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    light: import("../arguments/resources/criteria").NumberOrMinMax;
                    position: Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }>;
                    smokey: boolean;
                }>;
            }) | ({
                condition: "minecraft:match_tool";
            } & {
                predicate: Partial<{
                    count: import("../arguments/resources/criteria").NumberOrMinMax;
                    durability: import("../arguments/resources/criteria").NumberOrMinMax;
                    enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                    nbt: string;
                    potion: string;
                    tag: string | import("./Tag").TagClass<"items">;
                }>;
            }) | ({
                condition: "minecraft:random_chance";
            } & {
                chance: number;
            }) | ({
                condition: "minecraft:random_chance";
            } & {
                chance: number;
            }) | ({
                condition: "minecraft:random_chance_with_looting";
            } & {
                chance: number;
                looting_multiplier: number;
            }) | ({
                condition: "minecraft:reference";
            } & {
                name: string;
            }) | ({
                condition: "minecraft:table_bonus";
            } & {
                enchantment: import("../generalTypes").LiteralUnion<import("../arguments").ENCHANTMENTS>;
                chances: number[];
            }) | ({
                condition: "minecraft:time_check";
            } & {
                value: import("../arguments/resources/criteria").NumberOrMinMax;
                period?: number | undefined;
            }) | ({
                condition: "minecraft:weather_check";
            } & {
                raining?: boolean | undefined;
                thundering?: boolean | undefined;
            })>;
        }) | ({
            condition: "minecraft:killed_by_player";
        } & {
            inverse: boolean;
        }) | ({
            condition: "minecraft:location_check";
        } & {
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            offsetZ?: number | undefined;
            predicate: Partial<{
                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                block: Partial<{
                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                    tag: string | import("./Tag").TagClass<"blocks">;
                    nbt: string;
                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                fluid: Partial<{
                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                    tag: string | import("./Tag").TagClass<"fluids">;
                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                light: import("../arguments/resources/criteria").NumberOrMinMax;
                position: Partial<{
                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                }>;
                smokey: boolean;
            }>;
        }) | ({
            condition: "minecraft:match_tool";
        } & {
            predicate: Partial<{
                count: import("../arguments/resources/criteria").NumberOrMinMax;
                durability: import("../arguments/resources/criteria").NumberOrMinMax;
                enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                nbt: string;
                potion: string;
                tag: string | import("./Tag").TagClass<"items">;
            }>;
        }) | ({
            condition: "minecraft:random_chance";
        } & {
            chance: number;
        }) | ({
            condition: "minecraft:random_chance";
        } & {
            chance: number;
        }) | ({
            condition: "minecraft:random_chance_with_looting";
        } & {
            chance: number;
            looting_multiplier: number;
        }) | ({
            condition: "minecraft:reference";
        } & {
            name: string;
        }) | ({
            condition: "minecraft:table_bonus";
        } & {
            enchantment: import("../generalTypes").LiteralUnion<import("../arguments").ENCHANTMENTS>;
            chances: number[];
        }) | ({
            condition: "minecraft:time_check";
        } & {
            value: import("../arguments/resources/criteria").NumberOrMinMax;
            period?: number | undefined;
        }) | ({
            condition: "minecraft:weather_check";
        } & {
            raining?: boolean | undefined;
            thundering?: boolean | undefined;
        }))[];
    }) | ({
        condition: "minecraft:block_state_property";
    } & {
        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
        properties?: Record<string, string> | undefined;
    }) | ({
        condition: "minecraft:damage_source_properties";
    } & {
        predicate: Partial<{
            blocked: boolean;
            dealt: import("../arguments/resources/criteria").NumberOrMinMax;
            taken: import("../arguments/resources/criteria").NumberOrMinMax;
            source_entity: Partial<{
                distance: Partial<{
                    absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                    horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                }> & Partial<{
                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                }> & Partial<{
                    biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                    block: Partial<{
                        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                        tag: string | import("./Tag").TagClass<"blocks">;
                        nbt: string;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                    feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                    fluid: Partial<{
                        fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                        tag: string | import("./Tag").TagClass<"fluids">;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    light: import("../arguments/resources/criteria").NumberOrMinMax;
                    position: Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }>;
                    smokey: boolean;
                }>;
                effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                    amplifier?: number | {
                        max?: number | undefined;
                        min?: number | undefined;
                    } | undefined;
                    duration?: number | {
                        max?: number | undefined;
                        min?: number | undefined;
                    } | undefined;
                }>>>;
                equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                    count: import("../arguments/resources/criteria").NumberOrMinMax;
                    durability: import("../arguments/resources/criteria").NumberOrMinMax;
                    enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                    nbt: string;
                    potion: string;
                    tag: string | import("./Tag").TagClass<"items">;
                }>>;
                flags: Partial<{
                    is_on_fire: boolean;
                    is_sneaking: boolean;
                    is_sprinting: boolean;
                    is_swimming: boolean;
                    is_baby: boolean;
                }>;
                location: Partial<{
                    biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                    block: Partial<{
                        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                        tag: string | import("./Tag").TagClass<"blocks">;
                        nbt: string;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                    feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                    fluid: Partial<{
                        fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                        tag: string | import("./Tag").TagClass<"fluids">;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    light: import("../arguments/resources/criteria").NumberOrMinMax;
                    position: Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }>;
                    smokey: boolean;
                }>;
                nbt: string;
                player: Partial<{
                    advancements: Record<string, boolean | Record<string, boolean>>;
                    gamemode: import("../arguments").GAMEMODES;
                    level: import("../arguments/resources/criteria").NumberOrMinMax;
                    recipes: Record<string, boolean>;
                    stats: {
                        type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                        stat: string;
                        value: import("../arguments/resources/criteria").NumberOrMinMax;
                    };
                }>;
                team: string;
                type: (Pick<string, never> & {
                    trimStart: () => string;
                }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                targeted_entity: Partial<any>;
                vehicle: Partial<any>;
            }>;
            type: Partial<{
                bypasses_armor: boolean;
                bypasses_invulnerability: boolean;
                bypasses_magic: boolean;
                is_explosion: boolean;
                is_fire: boolean;
                is_magic: boolean;
                is_projectile: boolean;
                is_lightning: boolean;
                direct_entity: Partial<{
                    distance: Partial<{
                        absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                        horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                        amplifier?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                        duration?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                    }>>>;
                    equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                        count: import("../arguments/resources/criteria").NumberOrMinMax;
                        durability: import("../arguments/resources/criteria").NumberOrMinMax;
                        enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                        nbt: string;
                        potion: string;
                        tag: string | import("./Tag").TagClass<"items">;
                    }>>;
                    flags: Partial<{
                        is_on_fire: boolean;
                        is_sneaking: boolean;
                        is_sprinting: boolean;
                        is_swimming: boolean;
                        is_baby: boolean;
                    }>;
                    location: Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    nbt: string;
                    player: Partial<{
                        advancements: Record<string, boolean | Record<string, boolean>>;
                        gamemode: import("../arguments").GAMEMODES;
                        level: import("../arguments/resources/criteria").NumberOrMinMax;
                        recipes: Record<string, boolean>;
                        stats: {
                            type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                            stat: string;
                            value: import("../arguments/resources/criteria").NumberOrMinMax;
                        };
                    }>;
                    team: string;
                    type: (Pick<string, never> & {
                        trimStart: () => string;
                    }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                    targeted_entity: Partial<any>;
                    vehicle: Partial<any>;
                }>;
                source_entity: Partial<{
                    distance: Partial<{
                        absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                        horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                        amplifier?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                        duration?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                    }>>>;
                    equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                        count: import("../arguments/resources/criteria").NumberOrMinMax;
                        durability: import("../arguments/resources/criteria").NumberOrMinMax;
                        enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                        nbt: string;
                        potion: string;
                        tag: string | import("./Tag").TagClass<"items">;
                    }>>;
                    flags: Partial<{
                        is_on_fire: boolean;
                        is_sneaking: boolean;
                        is_sprinting: boolean;
                        is_swimming: boolean;
                        is_baby: boolean;
                    }>;
                    location: Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    nbt: string;
                    player: Partial<{
                        advancements: Record<string, boolean | Record<string, boolean>>;
                        gamemode: import("../arguments").GAMEMODES;
                        level: import("../arguments/resources/criteria").NumberOrMinMax;
                        recipes: Record<string, boolean>;
                        stats: {
                            type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                            stat: string;
                            value: import("../arguments/resources/criteria").NumberOrMinMax;
                        };
                    }>;
                    team: string;
                    type: (Pick<string, never> & {
                        trimStart: () => string;
                    }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                    targeted_entity: Partial<any>;
                    vehicle: Partial<any>;
                }>;
            }>;
        }>;
    }) | ({
        condition: "minecraft:entity_properties";
    } & {
        entity: "this" | "killer" | "killer_player";
        predicate: Partial<{
            distance: Partial<{
                absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
            }> & Partial<{
                x: import("../arguments/resources/criteria").NumberOrMinMax;
                y: import("../arguments/resources/criteria").NumberOrMinMax;
                z: import("../arguments/resources/criteria").NumberOrMinMax;
            }> & Partial<{
                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                block: Partial<{
                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                    tag: string | import("./Tag").TagClass<"blocks">;
                    nbt: string;
                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                fluid: Partial<{
                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                    tag: string | import("./Tag").TagClass<"fluids">;
                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                light: import("../arguments/resources/criteria").NumberOrMinMax;
                position: Partial<{
                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                }>;
                smokey: boolean;
            }>;
            effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                amplifier?: number | {
                    max?: number | undefined;
                    min?: number | undefined;
                } | undefined;
                duration?: number | {
                    max?: number | undefined;
                    min?: number | undefined;
                } | undefined;
            }>>>;
            equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                count: import("../arguments/resources/criteria").NumberOrMinMax;
                durability: import("../arguments/resources/criteria").NumberOrMinMax;
                enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                nbt: string;
                potion: string;
                tag: string | import("./Tag").TagClass<"items">;
            }>>;
            flags: Partial<{
                is_on_fire: boolean;
                is_sneaking: boolean;
                is_sprinting: boolean;
                is_swimming: boolean;
                is_baby: boolean;
            }>;
            location: Partial<{
                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                block: Partial<{
                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                    tag: string | import("./Tag").TagClass<"blocks">;
                    nbt: string;
                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                fluid: Partial<{
                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                    tag: string | import("./Tag").TagClass<"fluids">;
                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                light: import("../arguments/resources/criteria").NumberOrMinMax;
                position: Partial<{
                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                }>;
                smokey: boolean;
            }>;
            nbt: string;
            player: Partial<{
                advancements: Record<string, boolean | Record<string, boolean>>;
                gamemode: import("../arguments").GAMEMODES;
                level: import("../arguments/resources/criteria").NumberOrMinMax;
                recipes: Record<string, boolean>;
                stats: {
                    type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                    stat: string;
                    value: import("../arguments/resources/criteria").NumberOrMinMax;
                };
            }>;
            team: string;
            type: (Pick<string, never> & {
                trimStart: () => string;
            }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
            targeted_entity: Partial<any>;
            vehicle: Partial<any>;
        }>;
    }) | ({
        condition: "minecraft:entity_scores";
    } & {
        entity: "this" | "killer" | "killer_player";
        scores: Record<string, import("../arguments/resources/criteria").NumberOrMinMax>;
    }) | ({
        condition: "minecraft:inverted";
    } & {
        term: import("../arguments").ObjectOrArray<({
            condition: "minecraft:alternative";
        } & {
            terms: (({
                condition: "minecraft:alternative";
            } & any) | ({
                condition: "minecraft:block_state_property";
            } & {
                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                properties?: Record<string, string> | undefined;
            }) | ({
                condition: "minecraft:damage_source_properties";
            } & {
                predicate: Partial<{
                    blocked: boolean;
                    dealt: import("../arguments/resources/criteria").NumberOrMinMax;
                    taken: import("../arguments/resources/criteria").NumberOrMinMax;
                    source_entity: Partial<{
                        distance: Partial<{
                            absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                            horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                            amplifier?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                            duration?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                        }>>>;
                        equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                            count: import("../arguments/resources/criteria").NumberOrMinMax;
                            durability: import("../arguments/resources/criteria").NumberOrMinMax;
                            enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                            nbt: string;
                            potion: string;
                            tag: string | import("./Tag").TagClass<"items">;
                        }>>;
                        flags: Partial<{
                            is_on_fire: boolean;
                            is_sneaking: boolean;
                            is_sprinting: boolean;
                            is_swimming: boolean;
                            is_baby: boolean;
                        }>;
                        location: Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        nbt: string;
                        player: Partial<{
                            advancements: Record<string, boolean | Record<string, boolean>>;
                            gamemode: import("../arguments").GAMEMODES;
                            level: import("../arguments/resources/criteria").NumberOrMinMax;
                            recipes: Record<string, boolean>;
                            stats: {
                                type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                stat: string;
                                value: import("../arguments/resources/criteria").NumberOrMinMax;
                            };
                        }>;
                        team: string;
                        type: (Pick<string, never> & {
                            trimStart: () => string;
                        }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                        targeted_entity: Partial<any>;
                        vehicle: Partial<any>;
                    }>;
                    type: Partial<{
                        bypasses_armor: boolean;
                        bypasses_invulnerability: boolean;
                        bypasses_magic: boolean;
                        is_explosion: boolean;
                        is_fire: boolean;
                        is_magic: boolean;
                        is_projectile: boolean;
                        is_lightning: boolean;
                        direct_entity: Partial<{
                            distance: Partial<{
                                absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                                horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                            }> & Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }> & Partial<{
                                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                                block: Partial<{
                                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                    tag: string | import("./Tag").TagClass<"blocks">;
                                    nbt: string;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                                fluid: Partial<{
                                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                    tag: string | import("./Tag").TagClass<"fluids">;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                light: import("../arguments/resources/criteria").NumberOrMinMax;
                                position: Partial<{
                                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                                }>;
                                smokey: boolean;
                            }>;
                            effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                                amplifier?: number | {
                                    max?: number | undefined;
                                    min?: number | undefined;
                                } | undefined;
                                duration?: number | {
                                    max?: number | undefined;
                                    min?: number | undefined;
                                } | undefined;
                            }>>>;
                            equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                                count: import("../arguments/resources/criteria").NumberOrMinMax;
                                durability: import("../arguments/resources/criteria").NumberOrMinMax;
                                enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                                stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                                item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                                nbt: string;
                                potion: string;
                                tag: string | import("./Tag").TagClass<"items">;
                            }>>;
                            flags: Partial<{
                                is_on_fire: boolean;
                                is_sneaking: boolean;
                                is_sprinting: boolean;
                                is_swimming: boolean;
                                is_baby: boolean;
                            }>;
                            location: Partial<{
                                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                                block: Partial<{
                                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                    tag: string | import("./Tag").TagClass<"blocks">;
                                    nbt: string;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                                fluid: Partial<{
                                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                    tag: string | import("./Tag").TagClass<"fluids">;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                light: import("../arguments/resources/criteria").NumberOrMinMax;
                                position: Partial<{
                                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                                }>;
                                smokey: boolean;
                            }>;
                            nbt: string;
                            player: Partial<{
                                advancements: Record<string, boolean | Record<string, boolean>>;
                                gamemode: import("../arguments").GAMEMODES;
                                level: import("../arguments/resources/criteria").NumberOrMinMax;
                                recipes: Record<string, boolean>;
                                stats: {
                                    type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                    stat: string;
                                    value: import("../arguments/resources/criteria").NumberOrMinMax;
                                };
                            }>;
                            team: string;
                            type: (Pick<string, never> & {
                                trimStart: () => string;
                            }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                            targeted_entity: Partial<any>;
                            vehicle: Partial<any>;
                        }>;
                        source_entity: Partial<{
                            distance: Partial<{
                                absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                                horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                            }> & Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }> & Partial<{
                                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                                block: Partial<{
                                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                    tag: string | import("./Tag").TagClass<"blocks">;
                                    nbt: string;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                                fluid: Partial<{
                                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                    tag: string | import("./Tag").TagClass<"fluids">;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                light: import("../arguments/resources/criteria").NumberOrMinMax;
                                position: Partial<{
                                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                                }>;
                                smokey: boolean;
                            }>;
                            effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                                amplifier?: number | {
                                    max?: number | undefined;
                                    min?: number | undefined;
                                } | undefined;
                                duration?: number | {
                                    max?: number | undefined;
                                    min?: number | undefined;
                                } | undefined;
                            }>>>;
                            equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                                count: import("../arguments/resources/criteria").NumberOrMinMax;
                                durability: import("../arguments/resources/criteria").NumberOrMinMax;
                                enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                                stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                                item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                                nbt: string;
                                potion: string;
                                tag: string | import("./Tag").TagClass<"items">;
                            }>>;
                            flags: Partial<{
                                is_on_fire: boolean;
                                is_sneaking: boolean;
                                is_sprinting: boolean;
                                is_swimming: boolean;
                                is_baby: boolean;
                            }>;
                            location: Partial<{
                                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                                block: Partial<{
                                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                    tag: string | import("./Tag").TagClass<"blocks">;
                                    nbt: string;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                                fluid: Partial<{
                                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                    tag: string | import("./Tag").TagClass<"fluids">;
                                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                                }>;
                                light: import("../arguments/resources/criteria").NumberOrMinMax;
                                position: Partial<{
                                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                                }>;
                                smokey: boolean;
                            }>;
                            nbt: string;
                            player: Partial<{
                                advancements: Record<string, boolean | Record<string, boolean>>;
                                gamemode: import("../arguments").GAMEMODES;
                                level: import("../arguments/resources/criteria").NumberOrMinMax;
                                recipes: Record<string, boolean>;
                                stats: {
                                    type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                    stat: string;
                                    value: import("../arguments/resources/criteria").NumberOrMinMax;
                                };
                            }>;
                            team: string;
                            type: (Pick<string, never> & {
                                trimStart: () => string;
                            }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                            targeted_entity: Partial<any>;
                            vehicle: Partial<any>;
                        }>;
                    }>;
                }>;
            }) | ({
                condition: "minecraft:entity_properties";
            } & {
                entity: "this" | "killer" | "killer_player";
                predicate: Partial<{
                    distance: Partial<{
                        absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                        horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                        amplifier?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                        duration?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                    }>>>;
                    equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                        count: import("../arguments/resources/criteria").NumberOrMinMax;
                        durability: import("../arguments/resources/criteria").NumberOrMinMax;
                        enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                        nbt: string;
                        potion: string;
                        tag: string | import("./Tag").TagClass<"items">;
                    }>>;
                    flags: Partial<{
                        is_on_fire: boolean;
                        is_sneaking: boolean;
                        is_sprinting: boolean;
                        is_swimming: boolean;
                        is_baby: boolean;
                    }>;
                    location: Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    nbt: string;
                    player: Partial<{
                        advancements: Record<string, boolean | Record<string, boolean>>;
                        gamemode: import("../arguments").GAMEMODES;
                        level: import("../arguments/resources/criteria").NumberOrMinMax;
                        recipes: Record<string, boolean>;
                        stats: {
                            type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                            stat: string;
                            value: import("../arguments/resources/criteria").NumberOrMinMax;
                        };
                    }>;
                    team: string;
                    type: (Pick<string, never> & {
                        trimStart: () => string;
                    }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                    targeted_entity: Partial<any>;
                    vehicle: Partial<any>;
                }>;
            }) | ({
                condition: "minecraft:entity_scores";
            } & {
                entity: "this" | "killer" | "killer_player";
                scores: Record<string, import("../arguments/resources/criteria").NumberOrMinMax>;
            }) | ({
                condition: "minecraft:inverted";
            } & any) | ({
                condition: "minecraft:killed_by_player";
            } & {
                inverse: boolean;
            }) | ({
                condition: "minecraft:location_check";
            } & {
                offsetX?: number | undefined;
                offsetY?: number | undefined;
                offsetZ?: number | undefined;
                predicate: Partial<{
                    biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                    block: Partial<{
                        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                        tag: string | import("./Tag").TagClass<"blocks">;
                        nbt: string;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                    feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                    fluid: Partial<{
                        fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                        tag: string | import("./Tag").TagClass<"fluids">;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    light: import("../arguments/resources/criteria").NumberOrMinMax;
                    position: Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }>;
                    smokey: boolean;
                }>;
            }) | ({
                condition: "minecraft:match_tool";
            } & {
                predicate: Partial<{
                    count: import("../arguments/resources/criteria").NumberOrMinMax;
                    durability: import("../arguments/resources/criteria").NumberOrMinMax;
                    enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                    nbt: string;
                    potion: string;
                    tag: string | import("./Tag").TagClass<"items">;
                }>;
            }) | ({
                condition: "minecraft:random_chance";
            } & {
                chance: number;
            }) | ({
                condition: "minecraft:random_chance";
            } & {
                chance: number;
            }) | ({
                condition: "minecraft:random_chance_with_looting";
            } & {
                chance: number;
                looting_multiplier: number;
            }) | ({
                condition: "minecraft:reference";
            } & {
                name: string;
            }) | ({
                condition: "minecraft:table_bonus";
            } & {
                enchantment: import("../generalTypes").LiteralUnion<import("../arguments").ENCHANTMENTS>;
                chances: number[];
            }) | ({
                condition: "minecraft:time_check";
            } & {
                value: import("../arguments/resources/criteria").NumberOrMinMax;
                period?: number | undefined;
            }) | ({
                condition: "minecraft:weather_check";
            } & {
                raining?: boolean | undefined;
                thundering?: boolean | undefined;
            }))[];
        }) | ({
            condition: "minecraft:block_state_property";
        } & {
            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
            properties?: Record<string, string> | undefined;
        }) | ({
            condition: "minecraft:damage_source_properties";
        } & {
            predicate: Partial<{
                blocked: boolean;
                dealt: import("../arguments/resources/criteria").NumberOrMinMax;
                taken: import("../arguments/resources/criteria").NumberOrMinMax;
                source_entity: Partial<{
                    distance: Partial<{
                        absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                        horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }> & Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                        amplifier?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                        duration?: number | {
                            max?: number | undefined;
                            min?: number | undefined;
                        } | undefined;
                    }>>>;
                    equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                        count: import("../arguments/resources/criteria").NumberOrMinMax;
                        durability: import("../arguments/resources/criteria").NumberOrMinMax;
                        enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                        item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                        nbt: string;
                        potion: string;
                        tag: string | import("./Tag").TagClass<"items">;
                    }>>;
                    flags: Partial<{
                        is_on_fire: boolean;
                        is_sneaking: boolean;
                        is_sprinting: boolean;
                        is_swimming: boolean;
                        is_baby: boolean;
                    }>;
                    location: Partial<{
                        biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                        block: Partial<{
                            block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                            tag: string | import("./Tag").TagClass<"blocks">;
                            nbt: string;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                        feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                        fluid: Partial<{
                            fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                            tag: string | import("./Tag").TagClass<"fluids">;
                            state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                        }>;
                        light: import("../arguments/resources/criteria").NumberOrMinMax;
                        position: Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }>;
                        smokey: boolean;
                    }>;
                    nbt: string;
                    player: Partial<{
                        advancements: Record<string, boolean | Record<string, boolean>>;
                        gamemode: import("../arguments").GAMEMODES;
                        level: import("../arguments/resources/criteria").NumberOrMinMax;
                        recipes: Record<string, boolean>;
                        stats: {
                            type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                            stat: string;
                            value: import("../arguments/resources/criteria").NumberOrMinMax;
                        };
                    }>;
                    team: string;
                    type: (Pick<string, never> & {
                        trimStart: () => string;
                    }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                    targeted_entity: Partial<any>;
                    vehicle: Partial<any>;
                }>;
                type: Partial<{
                    bypasses_armor: boolean;
                    bypasses_invulnerability: boolean;
                    bypasses_magic: boolean;
                    is_explosion: boolean;
                    is_fire: boolean;
                    is_magic: boolean;
                    is_projectile: boolean;
                    is_lightning: boolean;
                    direct_entity: Partial<{
                        distance: Partial<{
                            absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                            horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                            amplifier?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                            duration?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                        }>>>;
                        equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                            count: import("../arguments/resources/criteria").NumberOrMinMax;
                            durability: import("../arguments/resources/criteria").NumberOrMinMax;
                            enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                            nbt: string;
                            potion: string;
                            tag: string | import("./Tag").TagClass<"items">;
                        }>>;
                        flags: Partial<{
                            is_on_fire: boolean;
                            is_sneaking: boolean;
                            is_sprinting: boolean;
                            is_swimming: boolean;
                            is_baby: boolean;
                        }>;
                        location: Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        nbt: string;
                        player: Partial<{
                            advancements: Record<string, boolean | Record<string, boolean>>;
                            gamemode: import("../arguments").GAMEMODES;
                            level: import("../arguments/resources/criteria").NumberOrMinMax;
                            recipes: Record<string, boolean>;
                            stats: {
                                type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                stat: string;
                                value: import("../arguments/resources/criteria").NumberOrMinMax;
                            };
                        }>;
                        team: string;
                        type: (Pick<string, never> & {
                            trimStart: () => string;
                        }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                        targeted_entity: Partial<any>;
                        vehicle: Partial<any>;
                    }>;
                    source_entity: Partial<{
                        distance: Partial<{
                            absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                            horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            x: import("../arguments/resources/criteria").NumberOrMinMax;
                            y: import("../arguments/resources/criteria").NumberOrMinMax;
                            z: import("../arguments/resources/criteria").NumberOrMinMax;
                        }> & Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                            amplifier?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                            duration?: number | {
                                max?: number | undefined;
                                min?: number | undefined;
                            } | undefined;
                        }>>>;
                        equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                            count: import("../arguments/resources/criteria").NumberOrMinMax;
                            durability: import("../arguments/resources/criteria").NumberOrMinMax;
                            enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                            item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                            nbt: string;
                            potion: string;
                            tag: string | import("./Tag").TagClass<"items">;
                        }>>;
                        flags: Partial<{
                            is_on_fire: boolean;
                            is_sneaking: boolean;
                            is_sprinting: boolean;
                            is_swimming: boolean;
                            is_baby: boolean;
                        }>;
                        location: Partial<{
                            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                            block: Partial<{
                                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                                tag: string | import("./Tag").TagClass<"blocks">;
                                nbt: string;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                            fluid: Partial<{
                                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                                tag: string | import("./Tag").TagClass<"fluids">;
                                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                            }>;
                            light: import("../arguments/resources/criteria").NumberOrMinMax;
                            position: Partial<{
                                x: import("../arguments/resources/criteria").NumberOrMinMax;
                                y: import("../arguments/resources/criteria").NumberOrMinMax;
                                z: import("../arguments/resources/criteria").NumberOrMinMax;
                            }>;
                            smokey: boolean;
                        }>;
                        nbt: string;
                        player: Partial<{
                            advancements: Record<string, boolean | Record<string, boolean>>;
                            gamemode: import("../arguments").GAMEMODES;
                            level: import("../arguments/resources/criteria").NumberOrMinMax;
                            recipes: Record<string, boolean>;
                            stats: {
                                type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                                stat: string;
                                value: import("../arguments/resources/criteria").NumberOrMinMax;
                            };
                        }>;
                        team: string;
                        type: (Pick<string, never> & {
                            trimStart: () => string;
                        }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                        targeted_entity: Partial<any>;
                        vehicle: Partial<any>;
                    }>;
                }>;
            }>;
        }) | ({
            condition: "minecraft:entity_properties";
        } & {
            entity: "this" | "killer" | "killer_player";
            predicate: Partial<{
                distance: Partial<{
                    absolute: import("../arguments/resources/criteria").NumberOrMinMax;
                    horizontal: import("../arguments/resources/criteria").NumberOrMinMax;
                }> & Partial<{
                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                }> & Partial<{
                    biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                    block: Partial<{
                        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                        tag: string | import("./Tag").TagClass<"blocks">;
                        nbt: string;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                    feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                    fluid: Partial<{
                        fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                        tag: string | import("./Tag").TagClass<"fluids">;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    light: import("../arguments/resources/criteria").NumberOrMinMax;
                    position: Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }>;
                    smokey: boolean;
                }>;
                effects: Record<import("../arguments").MOB_EFFECTS, Partial<Record<import("../generalTypes").LiteralUnion<import("../arguments").MOB_EFFECTS>, {
                    amplifier?: number | {
                        max?: number | undefined;
                        min?: number | undefined;
                    } | undefined;
                    duration?: number | {
                        max?: number | undefined;
                        min?: number | undefined;
                    } | undefined;
                }>>>;
                equipment: Record<"feet" | "mainhand" | "offhand" | "head" | "chest" | "legs", Partial<{
                    count: import("../arguments/resources/criteria").NumberOrMinMax;
                    durability: import("../arguments/resources/criteria").NumberOrMinMax;
                    enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                    item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                    nbt: string;
                    potion: string;
                    tag: string | import("./Tag").TagClass<"items">;
                }>>;
                flags: Partial<{
                    is_on_fire: boolean;
                    is_sneaking: boolean;
                    is_sprinting: boolean;
                    is_swimming: boolean;
                    is_baby: boolean;
                }>;
                location: Partial<{
                    biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                    block: Partial<{
                        block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                        tag: string | import("./Tag").TagClass<"blocks">;
                        nbt: string;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                    feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                    fluid: Partial<{
                        fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                        tag: string | import("./Tag").TagClass<"fluids">;
                        state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                    }>;
                    light: import("../arguments/resources/criteria").NumberOrMinMax;
                    position: Partial<{
                        x: import("../arguments/resources/criteria").NumberOrMinMax;
                        y: import("../arguments/resources/criteria").NumberOrMinMax;
                        z: import("../arguments/resources/criteria").NumberOrMinMax;
                    }>;
                    smokey: boolean;
                }>;
                nbt: string;
                player: Partial<{
                    advancements: Record<string, boolean | Record<string, boolean>>;
                    gamemode: import("../arguments").GAMEMODES;
                    level: import("../arguments/resources/criteria").NumberOrMinMax;
                    recipes: Record<string, boolean>;
                    stats: {
                        type: "minecraft:custom" | "minecraft:crafted" | "minecraft:used" | "minecraft:broken" | "minecraft:mined" | "minecraft:killed" | "minecraft:picked_up" | "minecraft:dropped" | "minecraft:killed_by";
                        stat: string;
                        value: import("../arguments/resources/criteria").NumberOrMinMax;
                    };
                }>;
                team: string;
                type: (Pick<string, never> & {
                    trimStart: () => string;
                }) | "minecraft:tnt" | "minecraft:arrow" | "minecraft:painting" | "minecraft:minecart" | "minecraft:snowball" | "minecraft:chest_minecart" | "minecraft:furnace_minecart" | "minecraft:egg" | "minecraft:cod" | "minecraft:salmon" | "minecraft:tropical_fish" | "minecraft:pufferfish" | "minecraft:chicken" | "minecraft:ender_pearl" | "minecraft:potion" | "minecraft:experience_bottle" | "minecraft:item_frame" | "minecraft:firework_rocket" | "minecraft:tnt_minecart" | "minecraft:hopper_minecart" | "minecraft:rabbit" | "minecraft:armor_stand" | "minecraft:command_block_minecart" | "minecraft:end_crystal" | "minecraft:spectral_arrow" | "minecraft:trident" | "minecraft:area_effect_cloud" | "minecraft:bat" | "minecraft:bee" | "minecraft:blaze" | "minecraft:boat" | "minecraft:cat" | "minecraft:cave_spider" | "minecraft:cow" | "minecraft:creeper" | "minecraft:dolphin" | "minecraft:donkey" | "minecraft:dragon_fireball" | "minecraft:drowned" | "minecraft:elder_guardian" | "minecraft:ender_dragon" | "minecraft:enderman" | "minecraft:endermite" | "minecraft:evoker" | "minecraft:evoker_fangs" | "minecraft:experience_orb" | "minecraft:eye_of_ender" | "minecraft:falling_block" | "minecraft:fox" | "minecraft:ghast" | "minecraft:giant" | "minecraft:guardian" | "minecraft:hoglin" | "minecraft:horse" | "minecraft:husk" | "minecraft:illusioner" | "minecraft:iron_golem" | "minecraft:item" | "minecraft:fireball" | "minecraft:leash_knot" | "minecraft:llama" | "minecraft:llama_spit" | "minecraft:magma_cube" | "minecraft:spawner_minecart" | "minecraft:mule" | "minecraft:mooshroom" | "minecraft:ocelot" | "minecraft:panda" | "minecraft:parrot" | "minecraft:phantom" | "minecraft:pig" | "minecraft:piglin" | "minecraft:pillager" | "minecraft:polar_bear" | "minecraft:ravager" | "minecraft:sheep" | "minecraft:shulker" | "minecraft:shulker_bullet" | "minecraft:silverfish" | "minecraft:skeleton" | "minecraft:skeleton_horse" | "minecraft:slime" | "minecraft:small_fireball" | "minecraft:snow_golem" | "minecraft:spider" | "minecraft:squid" | "minecraft:stray" | "minecraft:strider" | "minecraft:trader_llama" | "minecraft:turtle" | "minecraft:vex" | "minecraft:villager" | "minecraft:vindicator" | "minecraft:wandering_trader" | "minecraft:witch" | "minecraft:wither" | "minecraft:wither_skeleton" | "minecraft:wither_skull" | "minecraft:wolf" | "minecraft:zoglin" | "minecraft:zombie" | "minecraft:zombie_horse" | "minecraft:zombie_villager" | "minecraft:zombified_piglin" | "minecraft:lightning_bolt" | "minecraft:player" | "minecraft:fishing_bobber" | import("./Tag").TagClass<"entity_types">;
                targeted_entity: Partial<any>;
                vehicle: Partial<any>;
            }>;
        }) | ({
            condition: "minecraft:entity_scores";
        } & {
            entity: "this" | "killer" | "killer_player";
            scores: Record<string, import("../arguments/resources/criteria").NumberOrMinMax>;
        }) | ({
            condition: "minecraft:inverted";
        } & any) | ({
            condition: "minecraft:killed_by_player";
        } & {
            inverse: boolean;
        }) | ({
            condition: "minecraft:location_check";
        } & {
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            offsetZ?: number | undefined;
            predicate: Partial<{
                biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
                block: Partial<{
                    block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                    tag: string | import("./Tag").TagClass<"blocks">;
                    nbt: string;
                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
                feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
                fluid: Partial<{
                    fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                    tag: string | import("./Tag").TagClass<"fluids">;
                    state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                light: import("../arguments/resources/criteria").NumberOrMinMax;
                position: Partial<{
                    x: import("../arguments/resources/criteria").NumberOrMinMax;
                    y: import("../arguments/resources/criteria").NumberOrMinMax;
                    z: import("../arguments/resources/criteria").NumberOrMinMax;
                }>;
                smokey: boolean;
            }>;
        }) | ({
            condition: "minecraft:match_tool";
        } & {
            predicate: Partial<{
                count: import("../arguments/resources/criteria").NumberOrMinMax;
                durability: import("../arguments/resources/criteria").NumberOrMinMax;
                enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
                item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
                nbt: string;
                potion: string;
                tag: string | import("./Tag").TagClass<"items">;
            }>;
        }) | ({
            condition: "minecraft:random_chance";
        } & {
            chance: number;
        }) | ({
            condition: "minecraft:random_chance";
        } & {
            chance: number;
        }) | ({
            condition: "minecraft:random_chance_with_looting";
        } & {
            chance: number;
            looting_multiplier: number;
        }) | ({
            condition: "minecraft:reference";
        } & {
            name: string;
        }) | ({
            condition: "minecraft:table_bonus";
        } & {
            enchantment: import("../generalTypes").LiteralUnion<import("../arguments").ENCHANTMENTS>;
            chances: number[];
        }) | ({
            condition: "minecraft:time_check";
        } & {
            value: import("../arguments/resources/criteria").NumberOrMinMax;
            period?: number | undefined;
        }) | ({
            condition: "minecraft:weather_check";
        } & {
            raining?: boolean | undefined;
            thundering?: boolean | undefined;
        })>;
    }) | ({
        condition: "minecraft:killed_by_player";
    } & {
        inverse: boolean;
    }) | ({
        condition: "minecraft:location_check";
    } & {
        offsetX?: number | undefined;
        offsetY?: number | undefined;
        offsetZ?: number | undefined;
        predicate: Partial<{
            biome: import("../generalTypes").LiteralUnion<import("../arguments").BIOMES>;
            block: Partial<{
                block: import("../generalTypes").LiteralUnion<import("../arguments").BLOCKS>;
                tag: string | import("./Tag").TagClass<"blocks">;
                nbt: string;
                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
            }>;
            dimension: import("../generalTypes").LiteralUnion<import("../arguments").DIMENSION_TYPES>;
            feature: import("../generalTypes").LiteralUnion<import("../arguments").STRUCTURES>;
            fluid: Partial<{
                fluid: import("../generalTypes").LiteralUnion<import("../arguments").FLUIDS>;
                tag: string | import("./Tag").TagClass<"fluids">;
                state: Record<string, string | Pick<import("../arguments/resources/criteria").NumberOrMinMax, never>>;
            }>;
            light: import("../arguments/resources/criteria").NumberOrMinMax;
            position: Partial<{
                x: import("../arguments/resources/criteria").NumberOrMinMax;
                y: import("../arguments/resources/criteria").NumberOrMinMax;
                z: import("../arguments/resources/criteria").NumberOrMinMax;
            }>;
            smokey: boolean;
        }>;
    }) | ({
        condition: "minecraft:match_tool";
    } & {
        predicate: Partial<{
            count: import("../arguments/resources/criteria").NumberOrMinMax;
            durability: import("../arguments/resources/criteria").NumberOrMinMax;
            enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
            stored_enchantments: import("../arguments/resources/criteria").EnchantmentCriterion[];
            item: import("../generalTypes").LiteralUnion<import("../arguments").ITEMS>;
            nbt: string;
            potion: string;
            tag: string | import("./Tag").TagClass<"items">;
        }>;
    }) | ({
        condition: "minecraft:random_chance";
    } & {
        chance: number;
    }) | ({
        condition: "minecraft:random_chance";
    } & {
        chance: number;
    }) | ({
        condition: "minecraft:random_chance_with_looting";
    } & {
        chance: number;
        looting_multiplier: number;
    }) | ({
        condition: "minecraft:reference";
    } & {
        name: string;
    }) | ({
        condition: "minecraft:table_bonus";
    } & {
        enchantment: import("../generalTypes").LiteralUnion<import("../arguments").ENCHANTMENTS>;
        chances: number[];
    }) | ({
        condition: "minecraft:time_check";
    } & {
        value: import("../arguments/resources/criteria").NumberOrMinMax;
        period?: number | undefined;
    }) | ({
        condition: "minecraft:weather_check";
    } & {
        raining?: boolean | undefined;
        thundering?: boolean | undefined;
    })>;
    constructor(datapack: Datapack, name: string, predicate: PredicateType);
    /**
     * @internal
     */
    _toMinecraftCondition(): {
        value: any[];
    };
}
