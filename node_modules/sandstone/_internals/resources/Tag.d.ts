import { ResourceClass } from "./Resource";
import type { LiteralUnion } from "../generalTypes";
import type { BLOCKS, ENTITY_TYPES, FLUIDS, ITEMS, TAG_TYPES } from "../arguments/index";
import type { Datapack } from "../datapack/index";
import type { MCFunctionInstance } from "../datapack/Datapack";
import type { TagSingleValue } from "../datapack/resourcesTree";
export declare type HintedTagStringType<T extends TAG_TYPES> = (T extends 'blocks' ? LiteralUnion<BLOCKS> : T extends 'fluids' ? LiteralUnion<FLUIDS> : T extends 'entity_types' ? LiteralUnion<ENTITY_TYPES> : T extends 'functions' ? (LiteralUnion<string> | MCFunctionInstance) : T extends 'items' ? LiteralUnion<ITEMS> : string);
export declare class TagClass<TYPE extends TAG_TYPES> extends ResourceClass {
    readonly type: TYPE;
    readonly values: TagSingleValue<string>[];
    constructor(datapack: Datapack, type: TYPE, name: string, values?: readonly TagSingleValue<HintedTagStringType<TYPE>>[], replace?: boolean);
    get name(): string;
    /** Adds a new value to this tag. */
    add(value: TagSingleValue<HintedTagStringType<TYPE>>): void;
    toString(): string;
}
