import { ComponentClass } from "./abstractClasses";
import type { JsonTextComponent, MultipleEntitiesArgument, ObjectiveArgument } from "../arguments/index";
import type { CommandsRoot } from "../commands/index";
import type { ConditionClass } from "./abstractClasses";
import type { Range } from "../index";
import type { ObjectiveClass } from "./Objective";
declare type PlayersTarget = number | MultipleEntitiesArgument;
export declare class PlayerScore extends ComponentClass implements ConditionClass {
    commandsRoot: CommandsRoot;
    target: MultipleEntitiesArgument;
    objective: ObjectiveClass;
    constructor(commandsRoot: CommandsRoot, target: MultipleEntitiesArgument, objective: ObjectiveClass);
    toString(): string;
    protected _toChatComponent(): JsonTextComponent;
    _toMinecraftCondition: () => {
        value: (string | number | import("../arguments/index")._ShowAlias | import("./Selector").SelectorClass<true, true> | import("./Selector").SelectorClass<true, false> | import("./Selector").SelectorClass<false, false> | import("./Selector").SelectorClass<false, true>)[];
    };
    private unaryOperation;
    private binaryOperation;
    /** INLINE OPERATORS */
    /**
     * Reset the entity's score.
     */
    reset: () => void;
    /**
     * Set the current entity's score to other entities's scores.
     *
     * @param targets The targets to get the scores from
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    set(targets: PlayersTarget, objective?: ObjectiveArgument): this;
    /**
     * Set the current entity's score to the given value, or to the other target's score.
     *
     * @param amountOrTargetScore A value, or the target's score.
     */
    set(amountOrTargetScore: number | PlayerScore): this;
    /**
     * Adds other entities's scores to the current entity's score.
     *
     * @param targets The targets to add the scores from.
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    add(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): this;
    /**
     * Adds the given amount, or the other target's score, to the current entity's score.
     *
     * @param amountOrTargetScore The amount to add, or the target to add the scores from.
     */
    add(amountOrTargetScore: number | PlayerScore): this;
    /**
     * Substract other target's scores from the current entity's score.
     *
     * @param targets The targets to get the scores from.
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    remove(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): this;
    /**
     * Substract the given amount, or the other target's score, from the current entity's score.
     *
     * @param targetScore The amount to substract, or the target to get the score from.
     */
    remove(amountOrTargetScore: number | PlayerScore): this;
    /**
     * Multiply the current entity's score by other entities's scores.
     *
     * @param targets The targets to get the scores from
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    multiply(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): this;
    /**
     * Multiply the current entity's score by the given value, or other target's scores.
     *
     * @param amountOrTargetScore The value, or the target to get the scores from.
     */
    multiply(amountOrTargetScore: number | PlayerScore): this;
    /**
     * Divide the current entity's score by other entities's scores.
     *
     * @param targets The targets to get the scores from
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    divide(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): this;
    /**
     * Divide the current entity's score by the given value, or the other target's scores.
     *
     * @param amountOrTargetScore The value, or the target to get the scores from
     */
    divide(amountOrTargetScore: number | PlayerScore): this;
    /**
     * Get the remainder of the division of the current entity's score by other entities's scores.
     *
     * @param targets The targets to get the scores from
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    modulo(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): this;
    /**
     * Divide the current entity's score by other target's scores.
     *
     * @param amountOrTargetScore The value, or target's score to modulo the current score with.
     */
    modulo(amountOrTargetScore: number | PlayerScore): this;
    /**
     * Swap the current score with the other targets' scores.
     *
     * @param targets The targets to swap the scores with
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    swap(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): void;
    /**
     * Swap the current entity's score with the other target's scores.
     *
     * @param targetScore The target to swap the scores with
     */
    swap(targetScore: PlayerScore): void;
    /** EFFECT-FREE OPERATORS */
    /**
     * Returns a new anonymous score, equal to the sum of the current score and the given targets' score.
     *
     * @param targets The targets to add the scores from
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    plus(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the sum of the current score and the given amount or target' score.
     *
     * @param amountOrTargetScore The value, or the target to add the score from.
     */
    plus(amountOrTargetScore: number | PlayerScore): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the difference between the current score and the given targets' score.
     *
     * @param targets The targets to substract the scores from
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    minus(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the difference between the current score and the given amount or target' score.
     *
     * @param amountOrTargetScore The amount to substract, or the target to substract the score from.
     */
    minus(amountOrTargetScore: number | PlayerScore): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the product of the current score and the given targets' score.
     *
     * @param targets The targets to multiply the scores from
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    multipliedBy(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the product of the current score and the given amount or target's score.
     *
     * @param amountOrTargetScore The amount, or the target to multiply the scores from
     */
    multipliedBy(amountOrTargetScore: number | PlayerScore): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the division of the current score and the given targets' score.
     *
     * @param targets The targets to divide the scores by
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    dividedBy(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the division of the current score and the given amount or target's score.
     *
     * @param amountOrTargetScore The amount, or target's score to divide the current score by.
     */
    dividedBy(amountOrTargetScore: number | PlayerScore): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the modulo of the current score and the given targets' score.
     *
     * @param targets The targets to modulo the scores by
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    moduloBy(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): PlayerScore;
    /**
     * Returns a new anonymous score, equal to the modulo of the current score and the given value, or target's score.
     *
     * @param amountOrTargetScore The amount, or target's score to modulo the current score by.
     */
    moduloBy(amountOrTargetScore: number | PlayerScore): PlayerScore;
    /** COMPARISONS OPERATORS */
    private comparison;
    /**
     * Check if the current score is strictly greater than the given score.
     *
     * @param targets The target to compare the current score against.
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    greaterThan(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): ConditionClass;
    /**
     * Check if the current score is strictly greater than the given amount or score.
     *
     * @param amountOrTargetScore The amount or score to compare the current score against.
     */
    greaterThan(amountOrTargetScore: number | PlayerScore): ConditionClass;
    /**
     * Check if the current score is greater or equal than the given score.
     *
     * @param targets The target to compare the current score against.
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    greaterOrEqualThan(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): ConditionClass;
    /**
     * Check if the current score is greater or equal than the given amount or score.
     *
     * @param amountOrTargetScore The amount or score compare the current score against.
     */
    greaterOrEqualThan(amountOrTargetScore: number | PlayerScore): ConditionClass;
    /**
     * Check if the current score is strictly lower than the given score.
     *
     * @param targets The target to compare the current score against.
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    lowerThan(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): ConditionClass;
    /**
     * Check if the current score is strictly lower than the given amount or score.
     *
     * @param amountOrTargetScore The amount or score to compare the current score against.
     */
    lowerThan(amountOrTargetScore: number | PlayerScore): ConditionClass;
    /**
     * Check if the current score is lower or equal than the given score.
     *
     * @param targets The target to compare the current score against.
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    lowerOrEqualThan(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): ConditionClass;
    /**
     * Check if the current score is lower or equal than the given amount or score.
     *
     * @param amountOrTargetScore The amount or score target to compare the current score against.
     */
    lowerOrEqualThan(amountOrTargetScore: number | PlayerScore): ConditionClass;
    /**
     * Check if the current score is equal to than the given score.
     *
     * @param targets The target to compare the current score against.
     *
     * @param objective The related objective. If not specified, default to the same objective as the current target.
     */
    equalTo(targets: MultipleEntitiesArgument, objective?: ObjectiveArgument): ConditionClass;
    /**
     * Check if the current score is equal to the given amount or score.
     *
     * @param amountOrTargetScore The amount or score to compare the current score against.
     */
    equalTo(amountOrTargetScore: number | PlayerScore): ConditionClass;
    /**
     * Check if the current score matches a certain range.
     *
     * @param range The range to compare the current score against.
     */
    matches: (range: Range) => {
        _toMinecraftCondition: () => {
            value: (string | import("../arguments/index")._ShowAlias | import("./Selector").SelectorClass<true, true> | import("./Selector").SelectorClass<true, false> | import("./Selector").SelectorClass<false, false> | import("./Selector").SelectorClass<false, true> | ObjectiveClass)[];
        };
    };
}
export {};
