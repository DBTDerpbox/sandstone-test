"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NBT = exports.NBTCustomObject = void 0;
const util_1 = __importDefault(require("util"));
const index_1 = require("./index");
class NBTCustomObject {
}
exports.NBTCustomObject = NBTCustomObject;
util_1.default.inspect.custom;
function customUnit(num, unit) {
    var _a, _b;
    return new (_b = class {
            constructor() {
                this[_a] = () => `${num}${unit}`;
            }
        },
        _a = util_1.default.inspect.custom,
        _b)();
}
function customUnitArray(numbers, unit) {
    var _a, _b;
    return new (_b = class {
            constructor() {
                this[_a] = () => `[I; ${numbers.join(', ')}]`;
            }
        },
        _a = util_1.default.inspect.custom,
        _b)();
}
function customNumber(num, unit) {
    if (Array.isArray(num)) {
        return num.map((n) => customUnit(n, unit));
    }
    return customUnit(num, unit);
}
exports.NBT = {
    /** Transforms a NBT object to a string. */
    toString: index_1.nbtParser,
    float: (num) => customNumber(num, 'f'),
    double: (num) => customNumber(num, 'd'),
    byte: (num) => customNumber(num, 'b'),
    short: (num) => customNumber(num, 's'),
    long: (num) => customNumber(num, 'l'),
    integerArray: (numbers) => customUnitArray(numbers, 'I'),
    longArray: (numbers) => customUnitArray(numbers, 'L'),
};
